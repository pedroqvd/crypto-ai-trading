import Anthropic from '@anthropic-ai/sdk';
import { TechnicalIndicators } from '../analysis/TechnicalAnalysisService';

export interface ClaudeAnalysisRequest {
  symbol: string;
  price: number;
  indicators: TechnicalIndicators;
  marketContext?: {
    trend: string;
    volume: number;
    volatility: number;
  };
}

export interface ClaudeAnalysisResponse {
  analysis: string;
  recommendation: 'strong_buy' | 'buy' | 'hold' | 'sell' | 'strong_sell';
  confidence: number;
  reasoning: string;
  timeframe: string;
  riskLevel: 'low' | 'medium' | 'high';
  keyPoints: string[];
  timestamp: string;
  cost: {
    inputTokens: number;
    outputTokens: number;
    totalCost: number;
  };
}

export class AnthropicService {
  private client: Anthropic;
  private model: string;

  constructor() {
    if (!process.env.ANTHROPIC_API_KEY) {
      throw new Error('ANTHROPIC_API_KEY is required');
    }

    this.client = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
      maxRetries: 3,
      timeout: 30000, // 30 segundos
    });

    this.model = process.env.CLAUDE_MODEL || 'claude-3-5-sonnet-20241022';
    console.log('ü§ñ AnthropicService initialized with model:', this.model);
  }

  // Helper function para extrair mensagem de erro
  private getErrorMessage(error: unknown): string {
    if (error instanceof Error) return error.message;
    return String(error);
  }

  // Helper function para extrair texto de ContentBlock
  private extractTextFromContent(content: Anthropic.ContentBlock[]): string {
    for (const block of content) {
      if (block.type === 'text') {
        return block.text;
      }
    }
    return '';
  }

  /**
   * Analisa dados de mercado e indicadores t√©cnicos
   */
  async analyzeTradingData(request: ClaudeAnalysisRequest): Promise<ClaudeAnalysisResponse> {
    try {
      const prompt = this.buildTradingPrompt(request);
      
      console.log(`üß† Requesting Claude analysis for ${request.symbol} at $${request.price}`);
      
      const startTime = Date.now();
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 1500,
        temperature: 0.1, // Baixa temperatura para respostas mais consistentes
        system: this.getSystemPrompt(),
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });

      const duration = Date.now() - startTime;
      console.log(`‚úÖ Claude response received in ${duration}ms`);

      // Parse da resposta
      const analysisResult = this.parseClaudeResponse(response, request);
      
      // Calcular custos
      const cost = this.calculateCost(response.usage);
      
      // Garantir que todas as propriedades obrigat√≥rias est√£o definidas
      return {
        analysis: analysisResult.analysis || 'An√°lise n√£o dispon√≠vel',
        recommendation: analysisResult.recommendation || 'hold',
        confidence: analysisResult.confidence || 0.5,
        reasoning: analysisResult.reasoning || 'An√°lise baseada nos indicadores t√©cnicos',
        timeframe: analysisResult.timeframe || 'm√©dio prazo',
        riskLevel: analysisResult.riskLevel || 'medium',
        keyPoints: analysisResult.keyPoints || ['An√°lise em processamento'],
        timestamp: new Date().toISOString(),
        cost
      };

    } catch (error) {
      console.error('‚ùå Claude API Error:', error);
      
      // Retornar resposta padr√£o em caso de erro
      return this.getDefaultResponse(request, this.getErrorMessage(error));
    }
  }

  /**
   * An√°lise r√°pida para chat
   */
  async quickAnalysis(message: string, context?: any): Promise<string> {
    try {
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 800,
        temperature: 0.2,
        system: 'Voc√™ √© um assistente especializado em trading de criptomoedas. Responda de forma clara e objetiva.',
        messages: [
          {
            role: 'user',
            content: `${message}\n\nContexto adicional: ${context ? JSON.stringify(context, null, 2) : 'N√£o fornecido'}`
          }
        ]
      });

      return this.extractTextFromContent(response.content) || 'N√£o foi poss√≠vel gerar resposta.';
    } catch (error) {
      console.error('‚ùå Claude Quick Analysis Error:', error);
      return `Erro na an√°lise: ${this.getErrorMessage(error)}. Tente novamente.`;
    }
  }

  /**
   * Constr√≥i prompt especializado para trading
   */
  private buildTradingPrompt(request: ClaudeAnalysisRequest): string {
    const { symbol, price, indicators, marketContext } = request;

    return `
Analise os seguintes dados de mercado para ${symbol}:

PRE√áO ATUAL: $${price}

INDICADORES T√âCNICOS:
‚Ä¢ RSI (14): ${indicators.rsi.value} (${indicators.rsi.signal})
‚Ä¢ Stochastic RSI: K=${indicators.stochRSI.k}, D=${indicators.stochRSI.d} (${indicators.stochRSI.signal})
‚Ä¢ BMSB: ${indicators.bmsb.signal} (Suporte: $${indicators.bmsb.support})
‚Ä¢ Sinal Geral: ${indicators.overall.signal} (Confian√ßa: ${indicators.overall.confidence})

${marketContext ? `
CONTEXTO DE MERCADO:
‚Ä¢ Tend√™ncia: ${marketContext.trend}
‚Ä¢ Volume: ${marketContext.volume}
‚Ä¢ Volatilidade: ${marketContext.volatility}
` : ''}

FORNE√áA SUA AN√ÅLISE NO SEGUINTE FORMATO JSON:
{
  "recommendation": "buy|sell|hold|strong_buy|strong_sell",
  "confidence": 0.75,
  "reasoning": "Explica√ß√£o detalhada da recomenda√ß√£o",
  "timeframe": "curto|m√©dio|longo prazo",
  "riskLevel": "low|medium|high",
  "keyPoints": [
    "Ponto principal 1",
    "Ponto principal 2",
    "Ponto principal 3"
  ],
  "priceTargets": {
    "support": 42000,
    "resistance": 45000,
    "stopLoss": 41000
  }
}

Seja objetivo e baseie-se nos indicadores t√©cnicos fornecidos.
`;
  }

  /**
   * System prompt para trading de crypto
   */
  private getSystemPrompt(): string {
    return `Voc√™ √© um analista t√©cnico especializado em criptomoedas com 10+ anos de experi√™ncia em trading.

SUAS CARACTER√çSTICAS:
‚Ä¢ Experi√™ncia em an√°lise t√©cnica avan√ßada
‚Ä¢ Conhecimento profundo de indicadores (RSI, MACD, Bollinger Bands, etc.)
‚Ä¢ Especializa√ß√£o em mercados crypto 24/7
‚Ä¢ Abordagem conservadora para gest√£o de risco

DIRETRIZES:
‚Ä¢ Sempre forne√ßa respostas em JSON v√°lido
‚Ä¢ Base suas an√°lises nos indicadores t√©cnicos fornecidos
‚Ä¢ Seja honesto sobre limita√ß√µes e incertezas
‚Ä¢ Considere a alta volatilidade dos mercados crypto
‚Ä¢ Inclua sempre gest√£o de risco nas recomenda√ß√µes

NUNCA:
‚Ä¢ D√™ garantias de lucro
‚Ä¢ Ignore sinais de risco
‚Ä¢ Fa√ßa recomenda√ß√µes sem base t√©cnica
‚Ä¢ Esque√ßa de mencionar stop-loss quando relevante`;
  }

  /**
   * Parse da resposta do Claude
   */
  private parseClaudeResponse(response: Anthropic.Message, request: ClaudeAnalysisRequest): Partial<ClaudeAnalysisResponse> {
    try {
      const content = this.extractTextFromContent(response.content);
      
      // Tentar extrair JSON da resposta
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsedData = JSON.parse(jsonMatch[0]);
        
        return {
          analysis: content,
          recommendation: parsedData.recommendation || 'hold',
          confidence: parsedData.confidence || 0.5,
          reasoning: parsedData.reasoning || 'An√°lise baseada nos indicadores t√©cnicos.',
          timeframe: parsedData.timeframe || 'm√©dio prazo',
          riskLevel: parsedData.riskLevel || 'medium',
          keyPoints: parsedData.keyPoints || ['An√°lise em andamento']
        };
      } else {
        // Fallback se n√£o conseguir extrair JSON
        return {
          analysis: content,
          recommendation: this.inferRecommendation(request.indicators),
          confidence: 0.6,
          reasoning: content.substring(0, 200) + '...',
          timeframe: 'm√©dio prazo',
          riskLevel: 'medium',
          keyPoints: ['An√°lise textual processada']
        };
      }
    } catch (error) {
      console.error('‚ùå Error parsing Claude response:', error);
      return this.getDefaultAnalysis(request);
    }
  }

  /**
   * Inferir recomenda√ß√£o baseada nos indicadores
   */
  private inferRecommendation(indicators: TechnicalIndicators): ClaudeAnalysisResponse['recommendation'] {
    const { overall } = indicators;
    
    switch (overall.recommendation) {
      case 'strong_buy': return 'strong_buy';
      case 'buy': return 'buy';
      case 'sell': return 'sell';
      case 'strong_sell': return 'strong_sell';
      default: return 'hold';
    }
  }

  /**
   * Calcular custos da API
   */
  private calculateCost(usage: Anthropic.Usage): ClaudeAnalysisResponse['cost'] {
    const inputCostPerToken = 0.000003; // $3 per 1M input tokens
    const outputCostPerToken = 0.000015; // $15 per 1M output tokens
    
    const inputTokens = usage.input_tokens || 0;
    const outputTokens = usage.output_tokens || 0;
    
    const inputCost = inputTokens * inputCostPerToken;
    const outputCost = outputTokens * outputCostPerToken;
    
    return {
      inputTokens,
      outputTokens,
      totalCost: inputCost + outputCost
    };
  }

  /**
   * Resposta padr√£o em caso de erro
   */
  private getDefaultResponse(request: ClaudeAnalysisRequest, errorMessage: string): ClaudeAnalysisResponse {
    return {
      analysis: `Erro na an√°lise de ${request.symbol}: ${errorMessage}`,
      recommendation: 'hold',
      confidence: 0.1,
      reasoning: 'An√°lise indispon√≠vel devido a erro t√©cnico. Aguarde e tente novamente.',
      timeframe: 'N/A',
      riskLevel: 'high',
      keyPoints: ['Sistema temporariamente indispon√≠vel'],
      timestamp: new Date().toISOString(),
      cost: {
        inputTokens: 0,
        outputTokens: 0,
        totalCost: 0
      }
    };
  }

  /**
   * An√°lise padr√£o baseada nos indicadores
   */
  private getDefaultAnalysis(request: ClaudeAnalysisRequest): Partial<ClaudeAnalysisResponse> {
    const { indicators } = request;
    
    return {
      analysis: `An√°lise t√©cnica autom√°tica para ${request.symbol}`,
      recommendation: this.inferRecommendation(indicators),
      confidence: indicators.overall.confidence,
      reasoning: `Baseado em RSI ${indicators.rsi.value} e sinal geral ${indicators.overall.signal}`,
      timeframe: 'm√©dio prazo',
      riskLevel: 'medium',
      keyPoints: [
        `RSI: ${indicators.rsi.value} (${indicators.rsi.signal})`,
        `BMSB: ${indicators.bmsb.signal}`,
        `Confian√ßa: ${Math.round(indicators.overall.confidence * 100)}%`
      ]
    };
  }

  /**
   * Verificar se a API est√° funcionando
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 10,
        messages: [
          {
            role: 'user',
            content: 'Test'
          }
        ]
      });
      
      console.log('‚úÖ Claude API health check passed');
      return true;
    } catch (error) {
      console.error('‚ùå Claude API health check failed:', error);
      return false;
    }
  }
}